.. pybrowser documentation master file, created by
   sphinx-quickstart on Sat Mar 23 16:21:35 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

**Welcome to pybrowser's documentation!**
==========================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

**About the project**
*********************
**pybrowser** is an attempt to simplify browser automation designed keeping end user in mind. Here 
is an example of usage,

.. code-block:: python

    from pybrowser import Browser 
    with Browser(browser_name=Browser.CHROME) as b:
        b.goto("https://www.google.com/")
        b.input("name:=q").enter("news")
        b.button("name:=btnK").click()
        b.take_screenshot()

**Why another browser automation API ?**
****************************************
You might be wondering, there are already enough automation APIs / libraries in the market, why another one ?
Well, as a starter, pybrowser isn't really a library per say, it is merely a toolkit that is an abstraction 
around the well known `Selenium <https://selenium-python.readthedocs.io/>`_ and `Requests <http://docs.python-requests.org/en/master/>`_ 
libraries in python. That means, you are not "forced" to do things in a certain way in pybrowser as done by other libraries.
Ruby's `watir <http://watir.com/>`_ is the main source of inspiration behind some of the design decissions, but pybrowser is
much simpler in terms of design as well as usage ! It is also lighweight and doesn't add too much overhead when it comes to abstraction. 

**Features**
************
*   Browser as an object with simple interface to interact with webpage elements
*   Exposes specific HTML elements and corresponding functionalities
*   Special interface to submit HTML forms
*   Cached element attributes
*   Takes care of downloading corresponding browser drivers, adding to the path and other such overheads
*   In built support for handling page/element wait times, staleness of elements and other such issues due to dynamic nature of webpages
*   Access to response code and header information
*   Ability to run browser in headless/incognito/with proxy and all the good stuff
*   Non browser mode support to directly deal with HTML pages & HTTP methods
*   HTML rendering support
*   Default exception handler
*   Uses Selenium and Requests under the hood

**Installation**
----------------
**pybrowser** is not in pypi yet. If you have pipenv, it can be installed with below command,

.. code-block:: python
    
    pipenv install -e git+https://github.com/pybrowser/pybrowser.git#egg=pybrowser

Feel free to clone/ fork and play around

**Requirements**
----------------
*   python 3.7+
*   selenium
*   requests
*   pyppeteer
*   pyquery

Note: Although, I have mentioned as python 3.7 or above, you should be able to get it to run with 3.6 also,
but not prior to that. For versions of other packages refer Pipfile or requirements file

**Detailed guide**
******************

**Browser object**
------------------
Browser is the main object that needs to be instantiated for further usage. Here are some examples,
To use as a typical browser,

.. code-block:: python
    
    #currently supports - Browser.CHROME and Browser.IE, 
    #although Chrome is highly recommended
    browser = Browser(browser_name=Browser.CHROME)

Browser supports multiple options as explained below,

*   browser_name - name of the browser such as Browser.IE, Browser.CHROME etc
*   incognito - when set to True, will start browser in incognito mode
*   headless - when set to True, will start browser in headless mode (you won't see the GUI)
*   browser_options - dict of options that you would provide to webdriver of corresponding browser
*   proxy - proxy url to use before starting browser
*   screenshot_on_exception - when set to True, takes screenshot when an exception occurs in webdriver
*   wait_time - wait time in seconds to be used in finding elements etc

Below sections explain the functionalities exposed by Browser.

**As a Web Browser**
--------------------
One of the key functionality provided by Browser object is access to your favorite browser as mentioned above. 
You can automate pretty much all of the activities you can do with you browser plus much more. Here are some examples,

*   **Navigation**

    Navigate just like how you would do in a regular browser.

    .. code-block:: python

        with Browser(browser_name=Browser.CHROME) as b:
            b.goto("http://url")
            b.refresh
            b.back
            b.forward

*   **Access to important properties**

    Access various properties of the browser/page like current url, page title, cookies, response data etc.

    .. code-block:: python

        with Browser(browser_name=Browser.CHROME) as b:
            b.goto("http://url")
            d = b.driver        #underlying selenium webdriver object
            u = b.url
            t = b.title
            c = b.cookies
            rc = b.response_code
            rh = b.response_headers
            re = b.response_encoding
            binary_content = b.content(raw=True)    #content in bytes
            text_content = b.content(raw=False)    #content in text

*   **More advanced actions on browser**

    You can perform a bunch of actions with the browser apart from accessing properties and general navigation.

    *   **Change driver**

        If you don't like the underlying selenium webdriver, provide your own

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.driver = your_custom_driver
    
    *   **Change window size**

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            b.maximize_window
            b.minimize_window
            b.fullscreen_window

    *   **Switch to (from Selenium)**

        You can switch to some other window, alert, frame etc. For more refer Selenium documentation `here <https://selenium-python.readthedocs.io/navigating.html/>`_

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            b.switch_to.alert
            b.switch_to.default_content()
            b.switch_to.frame('frame_name')
            b.switch_to.window('main')
    
    *   **Cookies**

        Add / delete/ get cookies

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            print(b.cookies)
            b.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
            b.delete_cookie('name')
            b.delete_all_cookies
    
    *   **JSON**

        If the response is JSON, get json.

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            print(b.json)

    *   **HTML**

        Get hold of HTML and do more with it. More on this in below section

        .. code-block:: python

            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            print(b.html())
    
    *   **Underlying requests session**

        Requests is an awesome python library for anything HTTP. More on that `requests-session <http://docs.python-requests.org/en/master/user/advanced/#session-objects>`_

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                session = b.requests_session
    
    *   **Take screenshot**

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("http://url")
                b.take_screenshot()     #guesses path
                b.take_screenshot(filename='filename.png')     #you can provide filename
                b.take_screenshot(filename='/path/to/dir')     #complete path without filename
                b.take_screenshot(filename='/path/to/dir/filename.png')   #complete path with filename
    
    *   **Execute javascript on browser**

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("http://url")
                b.execute_script("valid javascript for browser")
    
    *   **Close (ofcourse)**

        Closes all underlying sessions

        .. code-block:: python

            #with context manager no need to call close explicitly. Close is called automatically   
            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("http://url")
            #in this case, you will need to call explicitly
            b = Browser(browser_name=Browser.CHROME)
            b.goto("http://url")
            b.close
            
*   **Work with page elements**

    In a web page, access various elements and perform actions on them. Here are the various elements available,

    *   **Input**
        Represents any input element such as text, textarea, input type text etc where user can enter some text.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/login")
                b.input("id:=username").enter("someuser")
                b.input("id:=password").clear
    
    *   **Button**
        Represents any button element such as button, input type button.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/login")
                b.input("username").enter("someuser")
                b.button("xpath:=//*[@id='login']/button").click()
    
    *   **Link**
        Represents any element with a href (typically link to another resource).

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com")
                u = b.link("xpath:=//*[@id='content']/ul/li[14]/a").url
    
    *   **Radio**
        Represents a radio button.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://www.w3schools.com/php/php_form_complete.asp")
                radio = b.radio("xpath:=/html/body/form//input[@value='female']")
                print(radio.is_displayed)
                print(radio.is_selected)
                radio.select

    *   **Checkbox**
        Represents a checkbox.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/checkboxes")
                check_box = b.checkbox("xpath:=//*[@id='checkboxes']/input[1]")
                print(check_box.is_checked)
                check_box.check
                check_box.uncheck
    
    *   **Select**
        Represents any dropdown with one or many options to select from.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/checkboxes")
                dropdown = b.select("id:=dropdown")
                print(dropdown.options)
                dropdown.select_by_indices(0)
                dropdown.select_by_visible_texts("Option 1")
                print(dropdown.all_selected_options)
                dropdown.deselect_all       #and so on
    
    *   **File**
        Represents a file element which is typically used to upload or download files.

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/download")
                b.file("xpath:=//*[@id='content']/div/a[1]").download(directory='/to/dir/')
                b.goto("https://the-internet.herokuapp.com/upload")
                b.file("id:=file-upload").upload(filename='/path/to/valid/file')

    *   **Form**
        Represents a HTML form.

        .. code-block:: python

            form_data = [("id:=username", "tomsmith"), ("id:=password", "SuperSecretPassword!")]
            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/login")
                b.form("id:=login").fill_and_submit_form(form_data)
    
    *   **Element**
        Represents any element which doesn't belong to any of the categories above

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                b.goto("https://the-internet.herokuapp.com/add_remove_elements/")
                t = b.element("xpath:=//*[@id='content']/h3").text
                print(t)

*   **Access various properties of page elements**

    Once you identify an element per above bullet point, you can access various properties of the element such as tag_name, id etc. Below are some examples.

    .. code-block:: python

        with Browser(browser_name=Browser.CHROME) as b:
            b.goto("https://the-internet.herokuapp.com/login")
            ele = b.input("id:=username")
            ele.enter("some_user")
            print(ele.text)     #text if any
            print(ele.tag_name)     #input
            print(ele.id)       #username
            print(ele.name)     #username
            print(ele.type)     #text
            print(ele.css_classes)     #basically a list representing all css classess if any
            print(ele.value)     #some_user
            print(ele.href)     #href in case it's a link

*   **Non-HTML properties of page elements**

    Apart from the HTML properties there are some properties which essentially represent meta data around the element such as below.

    .. code-block:: python

        with Browser(browser_name=Browser.CHROME) as b:
            b.goto("https://the-internet.herokuapp.com/login")
            ele = b.input("id:=username")
            print(ele.is_found)
            print(ele.is_displayed)
            print(ele.is_visible)   #alias to is_displayed
            print(ele.is_enabled)
            print(ele.is_stale)     #checks if the element has gone stale after finding

**Non Browser mode**
--------------------
**pybrowser** is much more than browser automation. One of the idea behind pybrowser was to make it an interface to all things HTTP.
So with that in mind, you can do the following with pybrowser

*   **Access HTML & parse**

    You saw an example of accessing HTML object above via browser. You don't have to open a browser (such as Chrome) for that.
    Instead directly get html for the url and play around with that.

    *   **Get HTML directly**

        .. code-block:: python

            #note that even though you are using Browser(), you don't provide any browser and hence no browser is opened
            with Browser() as b:
                h = b.html(url="https://the-internet.herokuapp.com/login")
                print(h)
                print(h.text)
    
    *   **Search in HTML**
        You can search in html for a specific template like below

        .. code-block:: python

            #Look for some dynamic value
            with Browser() as b:
                h = b.html(url="http://dollarrupee.in/")
                search_text = "Current USD to INR exchange rate equals {} Rupees per 1 US Dollar"
                #note that use_text=True uses actual text content of the html. If this is False (default)
                #HTML document is used instead
                result = h.search(search_text, use_text=True)
                print(result)
                if result:
                    for r in result:
                        print(r)
            
            #You can also search for multiple occurrences of a template
            with Browser() as b:
                h = b.html(url="http://chromedriver.chromium.org/downloads")
                search_text = "ChromeDriver {} "
                result = h.search_all(search_text, use_text=True)
                for r in result:
                    for d in r:
                        print(d)
    
    *   **Find elements**
        Search for HTML elements by their attributes

        .. code-block:: python

            #Look for some dynamic value
            with Browser() as b:
                h = b.html(url="http://url/")
                e1 = h.elements.find_by_id("some_id")
                e2 = h.elements.find_by_class("some_cssclass")
                e3 = h.elements.rel_links("rel")    #lxml style find rel links (<a rel="tag"> Tag 1 </a>)
                e4 = h.elements.find_by_css_selector("div > a")
                e5 = h.elements.find_by_xpath("//div/a")
                e6 = h.elements.links(containing="some_text", url_only=True)    #returns list of tuple of link text and url
    
    *   **Render**
        If your HTML contains javascript that needs rendering then use this. You can also evaluate your own javascript

        .. warning::  This uses `puppeteer <https://developers.google.com/web/tools/puppeteer/>`_ from Google which basically uses headless chrome and requires it's own version of chromium. So using render for the first time downloads chromium to PYPPETEER_HOME. Make sure there is right access to this folder

        .. code-block:: python

            with Browser() as bro:
                s = '''() => {
                return {
                    width: document.documentElement.clientWidth,
                    height: document.documentElement.clientHeight,
                    deviceScaleFactor: window.devicePixelRatio,
                }
                }'''
                h = bro.html(url="https://the-internet.herokuapp.com/")
                r = h.render(script=s)
                print(r)

    *   **Save**
        You can of course save the HTML

        .. code-block:: python

            with Browser(browser_name=Browser.CHROME) as b:
                h = b.goto("http://google.com").html()
                h.save()        #guesses path
                h.save(filename='filename.html')     #you can provide filename
                h.save(filename='/path/to/dir')     #complete path without filename
                h.save(filename='/path/to/dir/filename.html')   #complete path with filename
                
     
Indices and tables
******************

* :ref:`search`
